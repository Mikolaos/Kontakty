<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Kontakty</name>
    </assembly>
    <members>
        <member name="T:Kontakty.Controllers.AccountController">
            <summary>
            Controller responsible for handling user account-related operations such as login and registration
            </summary>
        </member>
        <member name="M:Kontakty.Controllers.AccountController.#ctor(Microsoft.AspNetCore.Identity.UserManager{Kontakty.Models.AppUser},Kontakty.Interfaces.ITokenService,Microsoft.AspNetCore.Identity.SignInManager{Kontakty.Models.AppUser})">
            <summary>
            Initializes a new instance of the AccountController
            </summary>
            <param name="userManager">The UserManager service for managing user accounts</param>
            <param name="tokenService">The service for creating authentication tokens</param>
            <param name="signInManager">The SignInManager service for handling user sign-in operations</param>
        </member>
        <member name="M:Kontakty.Controllers.AccountController.Login(Kontakty.DTOs.LoginDto)">
            <summary>
            Authenticates a user and returns a JWT token upon successful login
            </summary>
            <param name="loginDto">The login credentials (username and password)</param>
            <returns>
            200 OK with user details and token if login successful
            400 Bad Request if model validation fails
            401 Unauthorized if credentials are invalid
            </returns>
        </member>
        <member name="M:Kontakty.Controllers.AccountController.Register(Kontakty.DTOs.RegisterDto)">
            <summary>
            Registers a new user account with the provided details
            </summary>
            <param name="registerDto">The registration details including username, email, and password</param>
            <returns>
            200 OK with user details and token if registration successful
            400 Bad Request if model validation fails
            500 Internal Server Error if user creation or role assignment fails
            </returns>
        </member>
        <member name="T:Kontakty.Controllers.ContactController">
            <summary>
            Controller responsible for managing contact operations including creation, retrieval, update, and deletion
            </summary>
        </member>
        <member name="M:Kontakty.Controllers.ContactController.#ctor(Microsoft.Extensions.Logging.ILogger{Kontakty.Controllers.ContactController},Kontakty.Data.ApplicationDBContext,Kontakty.Interfaces.IContactRepository)">
            <summary>
            Initializes a new instance of the ContactController
            </summary>
            <param name="logger">Logger service for tracking application events</param>
            <param name="context">Database context for contact operations</param>
            <param name="contactRepository">Repository for managing contact-related operations</param>
            <exception cref="T:System.ArgumentNullException">Thrown when context is null</exception>
        </member>
        <member name="M:Kontakty.Controllers.ContactController.GetAllWithQuery(Kontakty.Helpers.QueryObject)">
            <summary>
            Retrieves contacts based on the provided search query parameters
            </summary>
            <param name="query">Query parameters for filtering contacts</param>
            <returns>200 OK with filtered list of contacts</returns>
        </member>
        <member name="M:Kontakty.Controllers.ContactController.GetAll">
            <summary>
            Retrieves all contacts from the database
            </summary>
            <returns>200 OK with list of all contacts</returns>
        </member>
        <member name="M:Kontakty.Controllers.ContactController.GetById(System.Int32)">
            <summary>
            Retrieves a specific contact by their ID
            </summary>
            <param name="id">The ID of the contact to retrieve</param>
            <returns>
            200 OK with contact details if found
            404 Not Found if contact doesn't exist
            </returns>
        </member>
        <member name="M:Kontakty.Controllers.ContactController.Create(Kontakty.DTOs.ContactCreateAndUpdateDto)">
            <summary>
            Creates a new contact
            </summary>
            <param name="contactCreateAndUpdateDto">The contact information to create</param>
            <returns>
            201 Created with the newly created contact details
            400 Bad Request if model validation fails
            409 Conflict if email already exists
            </returns>
        </member>
        <member name="M:Kontakty.Controllers.ContactController.Update(System.Int32,Kontakty.DTOs.ContactCreateAndUpdateDto)">
            <summary>
            Updates an existing contact
            </summary>
            <param name="id">The ID of the contact to update</param>
            <param name="contactCreateAndUpdateDto">The updated contact information</param>
            <returns>
            200 OK with updated contact details
            404 Not Found if contact doesn't exist
            </returns>
        </member>
        <member name="M:Kontakty.Controllers.ContactController.Delete(System.Int32)">
            <summary>
            Deletes a specific contact
            </summary>
            <param name="id">The ID of the contact to delete</param>
            <returns>
            204 No Content if successfully deleted
            404 Not Found if contact doesn't exist
            </returns>
        </member>
        <member name="T:Kontakty.Data.ApplicationDBContext">
            <summary>
            Database context class that inherits from IdentityDbContext to handle both
            application data and identity management
            </summary>
        </member>
        <member name="M:Kontakty.Data.ApplicationDBContext.#ctor(Microsoft.EntityFrameworkCore.DbContextOptions)">
            <summary>
            Constructor that accepts database configuration options
            </summary>
            <param name="dbContextOptions">Database configuration options</param>
        </member>
        <member name="P:Kontakty.Data.ApplicationDBContext.Contacts">
            <summary>
            DbSet for managing contact records
            </summary>
        </member>
        <member name="P:Kontakty.Data.ApplicationDBContext.Categories">
            <summary>
            DbSet for managing contact categories
            </summary>
        </member>
        <member name="P:Kontakty.Data.ApplicationDBContext.SubCategories">
            <summary>
            DbSet for managing contact subcategories
            </summary>
        </member>
        <member name="M:Kontakty.Data.ApplicationDBContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Configures the database model and relationships
            </summary>
            <param name="modelBuilder">Model builder instance for configuring the database</param>
        </member>
        <member name="T:Kontakty.Interfaces.IContactRepository">
            <summary>
            Interface representing the repository for handling contact-related operations.
            Provides methods to perform CRUD operations and additional utility functions
            for managing and retrieving contact data.
            </summary>
        </member>
        <member name="M:Kontakty.Interfaces.IContactRepository.GetAllAsync(Kontakty.Helpers.QueryObject)">
            <summary>
            Retrieves all contacts from the repository.
            </summary>
            <returns>A list of all contact models.</returns>
        </member>
        <member name="M:Kontakty.Interfaces.IContactRepository.GetAllAsync">
            <summary>
            Retrieves all contacts from the data source.
            </summary>
            <returns>A task that represents the asynchronous operation. The task result contains a list of all contacts.</returns>
        </member>
        <member name="M:Kontakty.Interfaces.IContactRepository.GetByIdAsync(System.Int32)">
            <summary>
            Asynchronously retrieves a single contact by its ID.
            </summary>
            <param name="id">The ID of the contact to retrieve.</param>
            <returns>A task representing the asynchronous operation. The task result contains the found contact if it exists, otherwise null.</returns>
        </member>
        <member name="M:Kontakty.Interfaces.IContactRepository.CreateAsync(Kontakty.Models.ContactModel)">
            <summary>
            Adds a new contact to the database.
            </summary>
            <param name="contactModel">The contact information to be added.</param>
            <returns>The created contact with the assigned ID.</returns>
        </member>
        <member name="M:Kontakty.Interfaces.IContactRepository.UpdateAsync(System.Int32,Kontakty.DTOs.ContactCreateAndUpdateDto)">
            <summary>
            Asynchronously updates an existing contact based on the provided ID and update data.
            </summary>
            <param name="id">The unique identifier of the contact to update.</param>
            <param name="contactCreateAndUpdateDto">The data transfer object containing updated contact information.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the updated contact model, or null if the contact was not found.</returns>
        </member>
        <member name="M:Kontakty.Interfaces.IContactRepository.DeleteAsync(System.Int32)">
            <summary>
            Deletes a contact by its ID.
            </summary>
            <param name="id">The ID of the contact to be deleted.</param>
            <returns>The deleted contact if it exists; otherwise, null.</returns>
        </member>
        <member name="M:Kontakty.Interfaces.IContactRepository.ExistsByEmail(System.String)">
            <summary>
            Checks if a contact with the specified email address exists in the repository.
            </summary>
            <param name="email">The email address to check for existence.</param>
            <returns>A task that represents the asynchronous operation. The task result contains true if a contact with the email exists, otherwise false.</returns>
        </member>
        <member name="T:Kontakty.Mappings.MappingContact">
            <summary>
            Provides extension methods for mapping between various data transfer objects (DTOs) and the ContactModel.
            </summary>
        </member>
        <member name="M:Kontakty.Mappings.MappingContact.ToContactFromCreateDto(Kontakty.DTOs.ContactCreateAndUpdateDto)">
            <summary>
            Maps a ContactCreateAndUpdateDto instance to a ContactModel instance.
            </summary>
            <param name="contactCreateAndUpdateDto">The DTO object containing data for creating or updating a contact.</param>
            <returns>A ContactModel object populated with the data from the provided DTO.</returns>
        </member>
        <member name="M:Kontakty.Mappings.MappingContact.ToContactDetailDto(Kontakty.Models.ContactModel)">
            <summary>
            Maps a <see cref="T:Kontakty.Models.ContactModel"/> instance to a <see cref="T:Kontakty.DTOs.ContactDetailDto"/> instance.
            </summary>
            <param name="contactModel">The <see cref="T:Kontakty.Models.ContactModel"/> object containing contact details to map.</param>
            <returns>A <see cref="T:Kontakty.DTOs.ContactDetailDto"/> object with mapped values from the <paramref name="contactModel"/>.</returns>
        </member>
        <member name="M:Kontakty.Mappings.MappingContact.ToContactListDto(Kontakty.Models.ContactModel)">
            <summary>
            Maps a <see cref="T:Kontakty.Models.ContactModel"/> instance to a <see cref="T:Kontakty.DTOs.ContactListDto"/> instance.
            </summary>
            <param name="contactModel">The <see cref="T:Kontakty.Models.ContactModel"/> instance to be mapped.</param>
            <returns>A <see cref="T:Kontakty.DTOs.ContactListDto"/> instance containing basic information about the contact.</returns>
        </member>
        <member name="T:Kontakty.Repository.ContactRepository">
            <summary>
            Repository handling CRUD operations for contacts
            </summary>
        </member>
        <member name="M:Kontakty.Repository.ContactRepository.#ctor(Kontakty.Data.ApplicationDBContext)">
            <summary>
            Constructor initializing database context
            </summary>
        </member>
        <member name="M:Kontakty.Repository.ContactRepository.CreateAsync(Kontakty.Models.ContactModel)">
            <summary>
            Adds a new contact to the database
            </summary>
            <returns>Created contact with assigned ID</returns>
        </member>
        <member name="M:Kontakty.Repository.ContactRepository.DeleteAsync(System.Int32)">
            <summary>
            Removes specified contact from the database
            </summary>
            <param name="id">ID of contact to delete</param>
            <returns>Deleted contact or null if not found</returns>
        </member>
        <member name="M:Kontakty.Repository.ContactRepository.GetByIdAsync(System.Int32)">
            <summary>
            Retrieves a single contact by ID
            </summary>
            <param name="id">ID of contact to find</param>
            <returns>Found contact or null if not exists</returns>
        </member>
        <member name="M:Kontakty.Repository.ContactRepository.UpdateAsync(System.Int32,Kontakty.DTOs.ContactCreateAndUpdateDto)">
            <summary>
            Updates existing contact with new data
            </summary>
            <param name="id">ID of contact to update</param>
            <param name="contactCreateAndUpdateDto">New contact data</param>
            <returns>Updated contact or null if not found</returns>
        </member>
        <member name="M:Kontakty.Repository.ContactRepository.GetAllAsync(Kontakty.Helpers.QueryObject)">
            <summary>
            Gets filtered list of contacts
            </summary>
            <param name="query">Filter criteria</param>
            <returns>List of contacts matching criteria</returns>
        </member>
        <member name="M:Kontakty.Repository.ContactRepository.GetAllAsync">
            <summary>
            Gets all contacts without filtering
            </summary>
            <returns>List of all contacts</returns>
        </member>
        <member name="M:Kontakty.Repository.ContactRepository.ExistsByEmail(System.String)">
            <summary>
            Checks if contact with given email exists
            </summary>
            <param name="email">Email to check</param>
            <returns>True if email exists, false otherwise</returns>
        </member>
        <member name="T:Kontakty.Service.TokenService">
            <summary>
            Service responsible for generating JSON Web Tokens (JWT) for user authentication.
            </summary>
        </member>
        <member name="F:Kontakty.Service.TokenService._configuration">
            <summary>
            Represents the configuration settings used within the application.
            </summary>
            <remarks>
            This variable is used to retrieve application-specific configuration data,
            such as values related to JWT authentication, including keys, issuers, and audiences.
            It provides a mechanism to access configuration values from various sources supported by the IConfiguration interface.
            </remarks>
        </member>
        <member name="F:Kontakty.Service.TokenService._key">
            <summary>
            Represents the symmetric security key used for signing JSON Web Tokens (JWT).
            The key is derived from a configuration setting and is used to ensure the integrity and authenticity of tokens.
            </summary>
        </member>
        <member name="M:Kontakty.Service.TokenService.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            Provides functionality for creating JWT tokens.
        </member>
        <member name="M:Kontakty.Service.TokenService.CreateToken(Kontakty.Models.AppUser)">
            <summary>
            Generates a JSON Web Token (JWT) for the specified user.
            </summary>
            <param name="appUser">The user for whom the token is being created.</param>
            <returns>A JWT string representing the user's authentication token.</returns>
        </member>
    </members>
</doc>
